class Rover (x1 : Int, y1 : Int, d : Char) {
  var x: Int = x1
  var y: Int = y1
  var dir: Char = d
  var dirInt: Int = 0
  d match {
    case 'N' => {
      dirInt = 0
    }
    case 'E' => {
      dirInt = 1
    }
    case 'W' => {
      dirInt = 3
    }
    case 'S' => {
      dirInt = 2
    }

  }

  def moveOne(displace: Char): Unit = {
    displace match {
      case 'L' => {
        dirInt = (dirInt - 1 ) % 4
        if (dirInt < 0) dirInt = dirInt + 4
      }
      case 'R' => {
        dirInt = ( dirInt + 1 ) % 4
      }
      case 'M' => {
        dirInt match {
          case 0 => {y = y + 1}
          case 1 => {x = x + 1}
          case 2 => {y = y - 1}
          case 3 => {x = x - 1}
        }
      }
    }
  }

  def move(xs:List[Char]): Unit = {
    xs match {
      case List() => return
      case z::zs => {
        moveOne(z)
        move (zs)
      }
    }
  }

  override def toString: String = {
    dirInt match {
      case 0 => {
        dir = 'N'
      }
      case 1 => {
        dir = 'E'
      }
      case 2 => {
        dir = 'S'
      }
      case 3 => {
        dir = 'W'
      }
    }
    x + " " + y + " " + dir
  }
}
val r1 = new Rover(1,2,'N');
r1.toString
r1.move(List('M'))
r1.toString
